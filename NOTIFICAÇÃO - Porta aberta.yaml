blueprint:
  name: "Monitor Universal de Zonas"
  description: "Notifica entrada/saída em QUALQUER zona cadastrada automaticamente"
  domain: automation
  input:
    person_entity:
      name: Pessoa para monitorar
      description: "Selecione a entidade da pessoa a ser monitorada"
      selector:
        entity:
          domain: person
    notify_device:
      name: Dispositivo para notificar
      description: "Selecione seu dispositivo móvel registrado"
      selector:
        device:
          filter:
            integration: mobile_app
    message_enter:
      name: "Modelo de mensagem de entrada"
      description: "Use {person} para nome, {zone} para zona, {time} para horário"
      default: "📍 {person} chegou em {zone} às {time}"
      selector:
        text:
    message_leave:
      name: "Modelo de mensagem de saída"
      description: "Use {person} para nome, {zone} para zona, {time} para horário"
      default: "🚪 {person} saiu de {zone} às {time}"
      selector:
        text:

variables:
  person_name: "{{ states[input.person_entity].name }}"
  current_time: "{{ now().strftime('%H:%M') }}"
  all_zones: "{{ state_attr('zone.home', 'friendly_name') | default([]) + state_attr('zone.work', 'friendly_name') | default([]) }}"

trigger:
  - platform: state
    entity_id: !input person_entity

condition: >
  {{ 
    trigger.from_state.state != trigger.to_state.state and
    (trigger.from_state.state in states.zone | map(attribute='name') or
     trigger.to_state.state in states.zone | map(attribute='name'))
  }}

action:
  - choose:
      - conditions: "{{ trigger.to_state.state in states.zone | map(attribute='name') }}"
        sequence:
          - service: notify.mobile_app
            data:
              message: >
                {{
                  (input.message_enter
                  | replace('{person}', person_name)
                  | replace('{zone}', trigger.to_state.state)
                  | replace('{time}', current_time)
                  )
                }}
            target:
              device_id: !input notify_device
      - conditions: "{{ trigger.from_state.state in states.zone | map(attribute='name') }}"
        sequence:
          - service: notify.mobile_app
            data:
              message: >
                {{
                  (input.message_leave
                  | replace('{person}', person_name)
                  | replace('{zone}', trigger.from_state.state)
                  | replace('{time}', current_time)
                  )
                }}
            target:
              device_id: !input notify_device
